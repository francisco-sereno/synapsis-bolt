import React, { useState } from 'react';
import { Bot, Send, Upload, FileText, BarChart3, MessageSquare, Lightbulb, Download } from 'lucide-react';
import { useAI } from '../hooks/useAI';

interface Message {
  id: string;
  type: 'user' | 'ai';
  content: string;
  timestamp: Date;
  attachments?: Array<{
    name: string;
    type: 'csv' | 'pdf' | 'docx';
    size: string;
  }>;
}

const ConversationalAssistant = () => {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      type: 'ai',
      content: '¬°Hola! Soy tu asistente conversacional de investigaci√≥n. Puedo ayudarte con:\n\n‚Ä¢ An√°lisis de archivos CSV\n‚Ä¢ Interpretaci√≥n de resultados estad√≠sticos\n‚Ä¢ Dise√±o metodol√≥gico\n‚Ä¢ Revisi√≥n de literatura\n‚Ä¢ Preguntas sobre investigaci√≥n\n\n¬øEn qu√© puedo asistirte hoy?',
      timestamp: new Date()
    }
  ]);
  const [newMessage, setNewMessage] = useState('');
  const [uploadedFiles, setUploadedFiles] = useState<File[]>([]);
  const [isTyping, setIsTyping] = useState(false);

  const handleSendMessage = async () => {
    if (!newMessage.trim() && uploadedFiles.length === 0) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      type: 'user',
      content: newMessage,
      timestamp: new Date(),
      attachments: uploadedFiles.map(file => ({
        name: file.name,
        type: file.name.endsWith('.csv') ? 'csv' : file.name.endsWith('.pdf') ? 'pdf' : 'docx',
        size: `${(file.size / 1024).toFixed(1)} KB`
      }))
    };

    setMessages(prev => [...prev, userMessage]);
    setNewMessage('');
    setUploadedFiles([]);
    setIsTyping(true);

    // Simulate AI processing
    setTimeout(() => {
      const aiResponse: Message = {
        id: (Date.now() + 1).toString(),
        type: 'ai',
        content: generateAIResponse(newMessage, uploadedFiles),
        timestamp: new Date()
      };
      setMessages(prev => [...prev, aiResponse]);
      setIsTyping(false);
    }, 2000);
  };

  const generateAIResponse = (message: string, files: File[]) => {
    if (files.length > 0) {
      const csvFiles = files.filter(f => f.name.endsWith('.csv'));
      if (csvFiles.length > 0) {
        return `He analizado tu archivo CSV "${csvFiles[0].name}". Bas√°ndome en los datos:\n\nüìä **An√°lisis Descriptivo:**\n‚Ä¢ Total de registros: 156\n‚Ä¢ Variables num√©ricas: 8\n‚Ä¢ Variables categ√≥ricas: 4\n‚Ä¢ Valores faltantes: 3.2%\n\nüîç **Hallazgos Principales:**\n‚Ä¢ Media de satisfacci√≥n: 4.2/5.0\n‚Ä¢ Correlaci√≥n significativa entre variables X e Y (r=0.68, p<0.001)\n‚Ä¢ Distribuci√≥n normal en la mayor√≠a de variables\n\nüí° **Recomendaciones:**\n‚Ä¢ Considerar imputaci√≥n para valores faltantes\n‚Ä¢ Explorar an√°lisis de subgrupos\n‚Ä¢ Validar outliers identificados\n\n¬øTe gustar√≠a que profundice en alg√∫n aspecto espec√≠fico?`;
      }
    }

    const lowerMessage = message.toLowerCase();
    
    if (lowerMessage.includes('csv') || lowerMessage.includes('datos')) {
      return 'Para analizar datos CSV, puedes:\n\n1. **Subir el archivo** usando el bot√≥n de adjuntar\n2. **Describir tu pregunta** espec√≠fica sobre los datos\n3. **Especificar el tipo de an√°lisis** que necesitas\n\nPuedo ayudarte con:\n‚Ä¢ Estad√≠sticas descriptivas\n‚Ä¢ An√°lisis de correlaciones\n‚Ä¢ Detecci√≥n de outliers\n‚Ä¢ Visualizaciones recomendadas\n‚Ä¢ Interpretaci√≥n de resultados\n\n¬øQu√© archivo quieres analizar?';
    }
    
    if (lowerMessage.includes('metodolog') || lowerMessage.includes('dise√±o')) {
      return 'Te puedo ayudar con el dise√±o metodol√≥gico:\n\nüéØ **Coherencia Metodol√≥gica:**\n‚Ä¢ Alineaci√≥n problema-objetivos-hip√≥tesis\n‚Ä¢ Selecci√≥n de dise√±o apropiado\n‚Ä¢ Identificaci√≥n de variables\n\nüìä **Selecci√≥n de M√©todos:**\n‚Ä¢ Cuantitativo vs. Cualitativo vs. Mixto\n‚Ä¢ Estrategias de muestreo\n‚Ä¢ T√©cnicas de recolecci√≥n\n\nüîç **Validaci√≥n:**\n‚Ä¢ Validez interna y externa\n‚Ä¢ Confiabilidad de instrumentos\n‚Ä¢ Control de sesgos\n\n¬øPodr√≠as contarme m√°s sobre tu proyecto de investigaci√≥n?';
    }
    
    if (lowerMessage.includes('estad√≠stic') || lowerMessage.includes('an√°lisis')) {
      return 'Puedo asistirte con an√°lisis estad√≠sticos:\n\nüìà **An√°lisis Descriptivos:**\n‚Ä¢ Medidas de tendencia central\n‚Ä¢ Medidas de dispersi√≥n\n‚Ä¢ Distribuciones de frecuencia\n\nüîó **An√°lisis Inferenciales:**\n‚Ä¢ Pruebas de hip√≥tesis\n‚Ä¢ Correlaciones y regresiones\n‚Ä¢ ANOVA y comparaciones m√∫ltiples\n\nüìä **Interpretaci√≥n:**\n‚Ä¢ Significancia estad√≠stica vs. pr√°ctica\n‚Ä¢ Tama√±os del efecto\n‚Ä¢ Intervalos de confianza\n\n¬øQu√© tipo de an√°lisis espec√≠fico necesitas realizar?';
    }
    
    return 'Entiendo tu consulta. Como asistente especializado en investigaci√≥n, puedo ayudarte con:\n\n‚Ä¢ **An√°lisis de datos**: Sube archivos CSV para an√°lisis autom√°tico\n‚Ä¢ **Metodolog√≠a**: Dise√±o de estudios y validaci√≥n\n‚Ä¢ **Estad√≠stica**: Interpretaci√≥n de resultados\n‚Ä¢ **Literatura**: Resumen de art√≠culos acad√©micos\n‚Ä¢ **Instrumentos**: Creaci√≥n y validaci√≥n\n\n¬øPodr√≠as ser m√°s espec√≠fico sobre lo que necesitas? Si tienes datos para analizar, no dudes en subirlos.';
  };

  const handleFileUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = Array.from(e.target.files || []);
    setUploadedFiles(prev => [...prev, ...files]);
  };

  const removeFile = (index: number) => {
    setUploadedFiles(prev => prev.filter((_, i) => i !== index));
  };

  return (
    <div className="space-y-6">
      <div className="mb-8">
        <h1 className="text-3xl font-bold text-gray-900 mb-2">Asistente Conversacional</h1>
        <p className="text-gray-600">Chat inteligente para consultas de investigaci√≥n y an√°lisis de archivos</p>
      </div>

      <div className="bg-white rounded-xl shadow-sm border border-gray-100 h-[600px] flex flex-col">
        {/* Chat Messages */}
        <div className="flex-1 overflow-y-auto p-6 space-y-4">
          {messages.map((message) => (
            <div
              key={message.id}
              className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}
            >
              <div
                className={`max-w-3xl p-4 rounded-lg ${
                  message.type === 'user'
                    ? 'bg-blue-600 text-white'
                    : 'bg-gray-100 text-gray-900'
                }`}
              >
                {message.type === 'ai' && (
                  <div className="flex items-center mb-2">
                    <Bot className="w-4 h-4 mr-2 text-blue-600" />
                    <span className="text-sm font-medium text-blue-600">Asistente IA</span>
                  </div>
                )}
                
                <div className="whitespace-pre-line text-sm leading-relaxed">
                  {message.content}
                </div>
                
                {message.attachments && message.attachments.length > 0 && (
                  <div className="mt-3 space-y-2">
                    {message.attachments.map((attachment, index) => (
                      <div key={index} className="flex items-center space-x-2 bg-white/10 rounded p-2">
                        <FileText className="w-4 h-4" />
                        <span className="text-sm">{attachment.name}</span>
                        <span className="text-xs opacity-75">({attachment.size})</span>
                      </div>
                    ))}
                  </div>
                )}
                
                <p className={`text-xs mt-3 ${
                  message.type === 'user' ? 'text-blue-200' : 'text-gray-500'
                }`}>
                  {message.timestamp.toLocaleTimeString()}
                </p>
              </div>
            </div>
          ))}
          
          {isTyping && (
            <div className="flex justify-start">
              <div className="max-w-3xl p-4 rounded-lg bg-gray-100 text-gray-900">
                <div className="flex items-center mb-2">
                  <Bot className="w-4 h-4 mr-2 text-blue-600" />
                  <span className="text-sm font-medium text-blue-600">Asistente IA</span>
                </div>
                <div className="flex items-center space-x-1">
                  <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                  <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                  <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                  <span className="text-sm text-gray-500 ml-2">Analizando...</span>
                </div>
              </div>
            </div>
          )}
        </div>

        {/* File Upload Area */}
        {uploadedFiles.length > 0 && (
          <div className="border-t border-gray-200 p-4">
            <h4 className="text-sm font-medium text-gray-700 mb-2">Archivos Adjuntos:</h4>
            <div className="space-y-2">
              {uploadedFiles.map((file, index) => (
                <div key={index} className="flex items-center justify-between bg-gray-50 rounded p-2">
                  <div className="flex items-center space-x-2">
                    <FileText className="w-4 h-4 text-gray-600" />
                    <span className="text-sm text-gray-700">{file.name}</span>
                    <span className="text-xs text-gray-500">({(file.size / 1024).toFixed(1)} KB)</span>
                  </div>
                  <button
                    onClick={() => removeFile(index)}
                    className="text-red-600 hover:text-red-700 text-sm"
                  >
                    √ó
                  </button>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Message Input */}
        <div className="border-t border-gray-200 p-4">
          <div className="flex space-x-2 items-end">
            <input
              type="file"
              accept=".csv,.pdf,.docx,.txt"
              onChange={handleFileUpload}
              className="hidden"
              id="file-input"
              multiple
            />
            <label
              htmlFor="file-input"
              className="p-3 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors cursor-pointer"
            >
              <Upload className="w-4 h-4 text-gray-600" />
            </label>
            
            <input
              type="text"
              value={newMessage}
              onChange={(e) => setNewMessage(e.target.value)}
              onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
              placeholder="Haz una pregunta sobre investigaci√≥n o sube un archivo CSV para analizar..."
              className="flex-1 p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
            
            <button
              onClick={handleSendMessage}
              disabled={!newMessage.trim() && uploadedFiles.length === 0}
              className="px-4 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors"
            >
              <Send className="w-4 h-4" />
            </button>
          </div>
        </div>
      </div>

      {/* Quick Actions */}
      <div className="bg-white rounded-xl shadow-sm border border-gray-100 p-6">
        <h2 className="text-lg font-semibold text-gray-900 mb-4">Acciones R√°pidas</h2>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
          {[
            {
              label: 'Analizar CSV',
              icon: BarChart3,
              description: 'Sube un archivo CSV para an√°lisis autom√°tico',
              action: () => document.getElementById('file-input')?.click()
            },
            {
              label: 'Ayuda Metodol√≥gica',
              icon: Lightbulb,
              description: 'Consultas sobre dise√±o de investigaci√≥n',
              action: () => setNewMessage('Necesito ayuda con el dise√±o metodol√≥gico de mi investigaci√≥n')
            },
            {
              label: 'Interpretaci√≥n Estad√≠stica',
              icon: BarChart3,
              description: 'Explica resultados estad√≠sticos',
              action: () => setNewMessage('¬øPuedes ayudarme a interpretar estos resultados estad√≠sticos?')
            },
            {
              label: 'Revisi√≥n de Literatura',
              icon: FileText,
              description: 'Analiza documentos acad√©micos',
              action: () => setNewMessage('Ay√∫dame a revisar y resumir este art√≠culo acad√©mico')
            }
          ].map((action, index) => {
            const Icon = action.icon;
            return (
              <button
                key={index}
                onClick={action.action}
                className="text-left p-4 border border-gray-200 rounded-lg hover:border-blue-300 hover:bg-blue-50 transition-colors"
              >
                <Icon className="w-6 h-6 text-blue-600 mb-2" />
                <h3 className="font-medium text-gray-900 mb-1">{action.label}</h3>
                <p className="text-sm text-gray-600">{action.description}</p>
              </button>
            );
          })}
        </div>
      </div>
    </div>
  );
};

export default ConversationalAssistant;